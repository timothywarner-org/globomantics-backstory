# Globomantics Robotics API OpenAPI Specification
# Created by Tim Warner (TechTrainerTim.com), Principal Author at Pluralsight
# These materials are part of Pluralsight training content - No warranty provided

openapi: 3.0.0
info:
  title: Globomantics Robotics API
  description: |
    Comprehensive API for robot management, telemetry, and control systems.
    
    ## Authentication
    Use Bearer token in Authorization header or API key in X-API-Key header.
    
    ## Rate Limiting
    - Standard: 1000 requests/hour
    - Premium: 10000 requests/hour
    - Enterprise: Unlimited
  version: 2.3.0
  contact:
    name: Globomantics API Support
    email: api-support@globomantics.com
    url: https://developers.globomantics.com
  license:
    name: Proprietary
    url: https://globomantics.com/api-license

servers:
  - url: https://api.globomantics.com/v2
    description: Production server
  - url: https://api-staging.globomantics.com/v2
    description: Staging server

security:
  - bearerAuth: []
  - apiKey: []

tags:
  - name: Robots
    description: Robot management operations
  - name: Telemetry
    description: Real-time data and monitoring
  - name: Control
    description: Robot control and commands
  - name: Fleet
    description: Fleet management operations
  - name: Analytics
    description: Performance analytics and reporting
  - name: Maintenance
    description: Diagnostics and maintenance

paths:
  /robots:
    get:
      tags: [Robots]
      summary: List all robots
      operationId: listRobots
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
        - name: status
          in: query
          schema:
            type: string
            enum: [active, idle, maintenance, offline]
        - name: type
          in: query
          schema:
            type: string
            enum: [industrial, consumer, healthcare, education]
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RobotListResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '429':
          $ref: '#/components/responses/RateLimitError'

    post:
      tags: [Robots]
      summary: Create a new robot
      operationId: createRobot
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRobotRequest'
      responses:
        '201':
          description: Robot created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Robot'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /robots/{robotId}:
    parameters:
      - name: robotId
        in: path
        required: true
        schema:
          type: string
          pattern: '^rob_[a-zA-Z0-9]{10}$'

    get:
      tags: [Robots]
      summary: Get robot details
      operationId: getRobot
      responses:
        '200':
          description: Robot details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RobotDetail'
        '404':
          $ref: '#/components/responses/NotFoundError'

    put:
      tags: [Robots]
      summary: Update robot configuration
      operationId: updateRobot
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRobotRequest'
      responses:
        '200':
          description: Robot updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Robot'

    delete:
      tags: [Robots]
      summary: Delete robot
      operationId: deleteRobot
      responses:
        '204':
          description: Robot deleted successfully
        '404':
          $ref: '#/components/responses/NotFoundError'

  /robots/{robotId}/telemetry:
    get:
      tags: [Telemetry]
      summary: Get robot telemetry data
      operationId: getRobotTelemetry
      parameters:
        - name: robotId
          in: path
          required: true
          schema:
            type: string
        - name: metrics
          in: query
          schema:
            type: array
            items:
              type: string
              enum: [temperature, power, position, speed, battery]
        - name: interval
          in: query
          schema:
            type: string
            enum: [1m, 5m, 1h, 1d]
        - name: start_time
          in: query
          schema:
            type: string
            format: date-time
        - name: end_time
          in: query
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: Telemetry data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TelemetryResponse'

  /robots/{robotId}/commands:
    post:
      tags: [Control]
      summary: Send command to robot
      operationId: sendCommand
      parameters:
        - name: robotId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommandRequest'
      responses:
        '200':
          description: Command accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommandResponse'

  /robots/{robotId}/emergency-stop:
    post:
      tags: [Control]
      summary: Emergency stop robot
      operationId: emergencyStop
      parameters:
        - name: robotId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Emergency stop executed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmergencyStopResponse'

  /fleet/overview:
    get:
      tags: [Fleet]
      summary: Get fleet overview
      operationId: getFleetOverview
      responses:
        '200':
          description: Fleet overview data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FleetOverview'

  /analytics/performance:
    get:
      tags: [Analytics]
      summary: Get performance metrics
      operationId: getPerformanceMetrics
      parameters:
        - name: robot_id
          in: query
          schema:
            type: string
            default: all
        - name: metric
          in: query
          schema:
            type: string
            enum: [efficiency, uptime, error_rate, productivity]
        - name: period
          in: query
          schema:
            type: string
            enum: [day, week, month, quarter, year]
      responses:
        '200':
          description: Performance metrics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PerformanceMetrics'

  /robots/{robotId}/diagnostics:
    post:
      tags: [Maintenance]
      summary: Run diagnostic check
      operationId: runDiagnostic
      parameters:
        - name: robotId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DiagnosticRequest'
      responses:
        '200':
          description: Diagnostic results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiagnosticResponse'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    apiKey:
      type: apiKey
      in: header
      name: X-API-Key

  schemas:
    Robot:
      type: object
      properties:
        id:
          type: string
          example: rob_1234567890
        name:
          type: string
          example: Assembly Line Robot A1
        type:
          type: string
          enum: [industrial, consumer, healthcare, education]
        model:
          type: string
          example: GLB-1000
        status:
          type: string
          enum: [active, idle, maintenance, offline]
        location:
          $ref: '#/components/schemas/Location'
        firmware_version:
          type: string
          example: 4.2.1
        last_maintenance:
          type: string
          format: date-time
        uptime_hours:
          type: integer
          example: 2847
        created_at:
          type: string
          format: date-time

    RobotDetail:
      allOf:
        - $ref: '#/components/schemas/Robot'
        - type: object
          properties:
            serial_number:
              type: string
              example: GLB1000-2024-0342
            health:
              $ref: '#/components/schemas/Health'
            capabilities:
              type: array
              items:
                type: string
            configuration:
              $ref: '#/components/schemas/Configuration'
            telemetry:
              $ref: '#/components/schemas/CurrentTelemetry'

    Location:
      type: object
      properties:
        facility:
          type: string
          example: Plant A
        zone:
          type: string
          example: Assembly Line 3
        coordinates:
          type: object
          properties:
            lat:
              type: number
              format: double
            lng:
              type: number
              format: double

    Health:
      type: object
      properties:
        overall:
          type: integer
          minimum: 0
          maximum: 100
        components:
          type: object
          properties:
            motors:
              type: integer
            sensors:
              type: integer
            battery:
              type: integer
            connectivity:
              type: integer

    Configuration:
      type: object
      properties:
        max_speed:
          type: number
          format: double
        payload_capacity:
          type: integer
        work_envelope:
          type: object
          properties:
            reach:
              type: integer
            height:
              type: integer

    CurrentTelemetry:
      type: object
      properties:
        temperature:
          type: number
          format: double
        power_consumption:
          type: number
          format: double
        cycles_completed:
          type: integer
        error_rate:
          type: number
          format: double

    RobotListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Robot'
        pagination:
          $ref: '#/components/schemas/Pagination'

    Pagination:
      type: object
      properties:
        page:
          type: integer
        limit:
          type: integer
        total:
          type: integer
        pages:
          type: integer

    CreateRobotRequest:
      type: object
      required: [name, type, model, location]
      properties:
        name:
          type: string
        type:
          type: string
          enum: [industrial, consumer, healthcare, education]
        model:
          type: string
        location:
          $ref: '#/components/schemas/Location'
        configuration:
          $ref: '#/components/schemas/Configuration'

    UpdateRobotRequest:
      type: object
      properties:
        name:
          type: string
        location:
          $ref: '#/components/schemas/Location'
        configuration:
          $ref: '#/components/schemas/Configuration'

    CommandRequest:
      type: object
      required: [command, parameters]
      properties:
        command:
          type: string
          example: move_to_position
        parameters:
          type: object
        priority:
          type: string
          enum: [low, normal, high, critical]
          default: normal
        safety_check:
          type: boolean
          default: true

    CommandResponse:
      type: object
      properties:
        command_id:
          type: string
          example: cmd_9876543210
        status:
          type: string
          enum: [accepted, rejected, queued]
        estimated_completion:
          type: string
          format: date-time
        safety_validation:
          type: object
          properties:
            passed:
              type: boolean
            checks:
              type: array
              items:
                type: string

    TelemetryResponse:
      type: object
      properties:
        robot_id:
          type: string
        metrics:
          type: object
          additionalProperties:
            type: object
            properties:
              current:
                type: number
              unit:
                type: string
              history:
                type: array
                items:
                  type: object
                  properties:
                    timestamp:
                      type: string
                      format: date-time
                    value:
                      type: number

    EmergencyStopResponse:
      type: object
      properties:
        status:
          type: string
          example: stopped
        timestamp:
          type: string
          format: date-time
        reason:
          type: string
        affected_commands:
          type: array
          items:
            type: string

    FleetOverview:
      type: object
      properties:
        total_robots:
          type: integer
        by_status:
          type: object
          properties:
            active:
              type: integer
            idle:
              type: integer
            maintenance:
              type: integer
            offline:
              type: integer
        by_type:
          type: object
          additionalProperties:
            type: integer
        fleet_health:
          type: number
          format: double
        alerts:
          type: array
          items:
            $ref: '#/components/schemas/Alert'

    Alert:
      type: object
      properties:
        severity:
          type: string
          enum: [info, warning, error, critical]
        robot_id:
          type: string
        message:
          type: string
        timestamp:
          type: string
          format: date-time

    PerformanceMetrics:
      type: object
      properties:
        period:
          type: string
        metrics:
          type: object
          properties:
            overall_efficiency:
              type: number
            average_uptime:
              type: number
            tasks_completed:
              type: integer
            error_rate:
              type: number
            productivity_gain:
              type: number
        trends:
          type: object
          additionalProperties:
            type: string

    DiagnosticRequest:
      type: object
      properties:
        type:
          type: string
          enum: [quick, standard, comprehensive]
          default: standard
        components:
          type: array
          items:
            type: string

    DiagnosticResponse:
      type: object
      properties:
        diagnostic_id:
          type: string
          example: diag_5432109876
        status:
          type: string
          enum: [running, completed, failed]
        duration_seconds:
          type: integer
        results:
          type: object
          properties:
            overall_health:
              type: integer
            issues_found:
              type: integer
            details:
              type: array
              items:
                type: object
                properties:
                  component:
                    type: string
                  status:
                    type: string
                    enum: [ok, warning, error]
                  message:
                    type: string
                  recommendation:
                    type: string

    Error:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: string
              example: ROBOT_NOT_FOUND
            message:
              type: string
              example: The requested robot does not exist
            details:
              type: object
        request_id:
          type: string
          example: req_abc123def456

  responses:
    BadRequestError:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    UnauthorizedError:
      description: Authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFoundError:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    RateLimitError:
      description: Rate limit exceeded
      headers:
        X-RateLimit-Limit:
          schema:
            type: integer
          description: Request limit per hour
        X-RateLimit-Remaining:
          schema:
            type: integer
          description: Remaining requests
        X-RateLimit-Reset:
          schema:
            type: integer
          description: Unix timestamp for rate limit reset
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'